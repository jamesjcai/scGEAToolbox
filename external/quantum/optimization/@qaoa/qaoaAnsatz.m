function circuit = qaoaAnsatz(targetQubits, theta, numLayers, costLayerFcn, nameValuePairs)
%QAOAANSATZ Quantum Approximate Optimization Algorithm ansatz
%
%   circ = QAOAANSATZ(targetQubits, theta, costLayerFcn) returns a
%   quantumCircuit that applies the Quantum Approximate Optimization
%   Algorithm (QAOA) to the target qubits. The gate angles, theta, is a
%   2-by-numLayers matrix, with the first row corresponding to the cost
%   gate angles and the second row to the mixer gate angles. The i-th cost
%   gate layer generated by calling costLayerFcn(targetQubits, theta(1, i)).
%
%   circ = QAOAANSATZ(___, NAME, VALUE) returns a QAOA circuit where the
%   following optional inputs can be specified
%      MixerLayerFcn - Function to generate mixer layer gates
%      InitialGates - numVariables vector of initial gates
%
%   See also quantumCircuit

%  Copyright 2024 The MathWorks, Inc.

%  References: 
%  [1] A Quantum Approximate Optimization Algorithm, Edward Farhi and
%  Jeffrey Goldstone and Sam Gutmann, 2014, https://arxiv.org/abs/1411.4028 

arguments    
    targetQubits
    theta
    numLayers
    costLayerFcn
    nameValuePairs.MixerLayerFcn = @iDefaultMixerFcn
    % NOTE: During code review, we decided that there's some design
    % consideration as to what should be done with the initial
    % state/gates. There are (at least) two possibilities
    %
    % 1. Call this InputState and instead accept a 2^N length
    % vector or basis string, following how quantumCircuit/simulate
    % accepts an optional input state. 
    % 2. Followed Qiskit's QAOAAnsatz
    % https://docs.quantum.ibm.com/api/qiskit/qiskit.circuit.library.QAOAAnsatz
    % where the initial state is a circuit, rather than a basis
    % string/vector. 
    %
    % We'll remove this name-value pair for now. 
    % nameValuePairs.InitialGates = []
end

% Reshape circuit angles
theta = reshape(theta, [2 numLayers]);

% Cost and mixer gates
if ~isempty(nameValuePairs.MixerLayerFcn)
    mixerLayerFcn = nameValuePairs.MixerLayerFcn;
end
gates = [];
for ii = 1:numLayers
    gates = [...
        gates;...
        costLayerFcn(targetQubits, theta(1, ii));...
        mixerLayerFcn(targetQubits, theta(2, ii))]; %#ok
end

% Initial gates
% if isempty(nameValuePairs.InitialGates)
%     initialGates = hGate(targetQubits);
% else
%     initialGates = nameValuePairs.InitialGates;
% end
initialGates = hGate(targetQubits);

circuit = quantumCircuit([initialGates; gates]);

end

function mixerLayer = iDefaultMixerFcn(targetQubits, beta)

mixerLayer = rxGate(targetQubits, 2*beta);

end